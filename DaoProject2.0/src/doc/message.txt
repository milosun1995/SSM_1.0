2017/07/31
1、二次修改，数据连接类库。
2、工厂类不需要为Constructor类执行构造调用而痛苦了。
3、手写的代码，对于Connection数据库的连接控制必须要通过我们的ThreadLocal类取得.


2017/08/01
1、添加了proxy,动态代理。将MemberServiceImple子类里面所有方法异常处理和数据库关闭部分去掉。
2、每一个业务层的实现子类都可以采用动态代理对象,对数据库的 关闭进行统一方式的处理。

3、问题：在代理模式之中还需要考虑到十五的控制问题.所有的更新处理都需要进行事务的操作控制
所以更好的控制指的是对方法的名称开头做一个限制，如果以:add*、edit*、remove*、delete*、update* 等等为开头的方法
都应该自动启动事务控制。
	事物最原始的控制操作由Connection接口定义，所以直接利用DataBaseConnection类中的 getConnection()方法取得
Connection接口对象。	

4、写了一个通用IDao<K,V>接口，将IMemberDao extend IDao,利用这种模式可以对一些重复的方法进行进一步的抽象控制。
  (突出了泛型的推出，是一件非常有用的的JDK功能，since 1.5)

提示: 本程序的最大缺陷在于:所有需要进行事务控制的方法,都必须以明确的代码形式编写后才可以实现控制。虽然现在已经完整的实现了Dao的程序结构，但是还是
有一个类出现看了大量的重复代码:MemberDaoImpl子类。

接下来目的:假设现在项目里面有200张数据表存在的话,那么真是太痛苦了,因为所有的PreparedStatement设置数据部分需要自己完成,而所有的ResultSet结果
集转为VO类型的操作也要自己完成。
(1)、创建一个抽象类AbstractDaoImpl，将MemberDaoImpl或多个xxxDaoImpl实现类统继承于AbstractDaoImpl。并且范文权限设置为Protect,好处如下:
重用设计的关键
i、不能直接实例化。
ii、必须被继承，并且与子类共享非私有操作。
iii、可以编写一些所有子类的公共实现方法。


2017/08/02
目的一: 如果想要实现数据增加控制,现在所有的操作一定要通过类结构取得,所以对于增加数据的操作应该分为以下几个步骤:
1、add操作
(1)、动态生成一个SQL语句;
(2)、根据SQL语句动态创建PreporedStatement接口的数据;
(3)、执行数据的更新处理操作;

目的二:接下来继续按照同样的思路来解决数据更新问题。本次可以解决的更新只适合于根据主键的更新形式。，所以本次可需要以下支持:
2、edit操作
(1)、动态生成一个SQL语句,但是注意的是需要判断否有数据;
(2)、根据SQL语句动态创建PreporedStatement接口的数据;
(3)、在AbstractDao 抽象类中追加一个updateSupport()方法;

